import json
from typing import Dict, List, Any
import markdown
import re


def format_question_text(question: Dict[str, Any], current_num: int, total_num: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞

    Args:
        question: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞
        current_num: –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        total_num: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    """
    text = f"*–í–æ–ø—Ä–æ—Å {current_num}/{total_num}*\n\n"
    text += f"{question['text']}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'options' in question:
        options = question['options']
        if isinstance(options, str):
            try:
                options = json.loads(options)
            except json.JSONDecodeError:
                options = []

        for i, option in enumerate(options):
            text += f"{chr(65 + i)}. {option}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –≤–æ–ø—Ä–æ—Å–∞
    if question.get('question_type') == 'multiple':
        text += "\n_–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤_"
    elif question.get('question_type') == 'sequence':
        text += "\n_–†–∞—Å—Å—Ç–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ_"

    return text


def format_test_results(result: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞

    Args:
        result: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    text = f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞*\n\n"

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {result['correct_count']} –∏–∑ {result['total_questions']}\n"
    text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {result['percentage']}%\n\n"

    # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if result['percentage'] >= 90:
        text += "üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üèÜ"
    elif result['percentage'] >= 70:
        text += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif result['percentage'] >= 50:
        text += "üí™ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
    else:
        text += "üìö –°—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑."

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    if "new_achievements" in result and result["new_achievements"]:
        text += "\n\nüèÖ *–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n"
        for achievement in result["new_achievements"]:
            text += f"‚Ä¢ {achievement['name']} - {achievement['description']} (+{achievement['points']} –æ—á–∫–æ–≤)\n"

    return text


def format_detailed_results(result: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏

    Args:
        result: –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    text = f"üìã *–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    for i, q_result in enumerate(result['question_results']):
        is_correct = q_result['is_correct']

        text += f"*–í–æ–ø—Ä–æ—Å {i + 1}*: {q_result['question']}\n"
        text += f"–í–∞—à –æ—Ç–≤–µ—Ç: {format_answer(q_result['user_answer'], q_result.get('options', []))}\n"

        if not is_correct:
            text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {format_answer(q_result['correct_answer'], q_result.get('options', []))}\n"

        text += f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–µ—Ä–Ω–æ' if is_correct else '‚ùå –ù–µ–≤–µ—Ä–Ω–æ'}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if q_result.get('explanation'):
            text += f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: _{q_result['explanation']}_\n"

        text += "\n"

    return text


def format_answer(answer, options=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

    Args:
        answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º, —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π)
        options: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    if answer is None:
        return "–ù–µ –æ—Ç–≤–µ—á–µ–Ω–æ"

    if isinstance(answer, list):
        if options and all(isinstance(a, int) for a in answer):
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ —Ç–µ–∫—Å—Ç—ã
            return ", ".join([options[a] if a < len(options) else f"–í–∞—Ä–∏–∞–Ω—Ç {a + 1}" for a in answer])
        else:
            return ", ".join(map(str, answer))

    if isinstance(answer, int) and options and answer < len(options):
        return options[answer]

    return str(answer)


def truncate_text(text: str, max_length: int = 4000) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è—è "..." –≤ –∫–æ–Ω—Ü–µ

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞

    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text

    return text[:max_length - 3] + "..."


def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è Markdown

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

    Returns:
        str: –¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


def format_time_period(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã)

    Args:
        seconds: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"

    minutes = seconds // 60
    seconds %= 60

    if minutes < 60:
        return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"

    hours = minutes // 60
    minutes %= 60

    return f"{hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫"