import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from io import BytesIO

from services.quiz_service import QuizService
from services.stats_service import get_user_stats
from database.models import User
from database.db_manager import get_session

logger = logging.getLogger(__name__)
quiz_service = QuizService()


async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        user_id = update.effective_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
        topics = quiz_service.get_topics()

        if not topics:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
        keyboard = []
        for topic in topics:
            keyboard.append([
                InlineKeyboardButton(
                    topic["name"],
                    callback_data=f"quiz_start_{topic['id']}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã
        keyboard.append([
            InlineKeyboardButton(
                "üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞",
                callback_data="quiz_start_random"
            )
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error in start_test: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )


async def handle_test_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    try:
        if query.data.startswith("quiz_start_"):
            # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
            topic_id_str = query.data.replace("quiz_start_", "")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
            if topic_id_str == "random":
                import random
                topics = quiz_service.get_topics()
                if not topics:
                    await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –Ω–µ—Ç.")
                    return
                topic = random.choice(topics)
                topic_id = topic["id"]
            else:
                topic_id = int(topic_id_str)

            # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
            quiz_data = quiz_service.start_quiz(user_id, topic_id)

            if not quiz_data["success"]:
                await query.edit_message_text(quiz_data["message"])
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await show_question(update, context)

        elif query.data.startswith("quiz_answer_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
            parts = query.data.split("_")
            question_id = int(parts[2])
            option_index = int(parts[3])

            current_question = quiz_service.get_current_question(user_id)

            if current_question and current_question["id"] == question_id:
                if current_question["question_type"] == "single":
                    # –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    result = quiz_service.submit_answer(user_id, question_id, option_index)

                    if result["success"]:
                        if result["is_completed"]:
                            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
                            await show_test_results(update, context, result["result"])
                        else:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                            await show_question(update, context)
                    else:
                        await query.edit_message_text(result["message"])

                elif current_question["question_type"] == "multiple":
                    # –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    selected_options = quiz_service.active_quizzes[user_id]["answers"].get(str(question_id), [])

                    if option_index in selected_options:
                        selected_options.remove(option_index)
                    else:
                        selected_options.append(option_index)

                    quiz_service.active_quizzes[user_id]["answers"][str(question_id)] = selected_options

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                    await show_question(update, context, edit=True)

        elif query.data.startswith("quiz_seq_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            parts = query.data.split("_")
            question_id = int(parts[2])
            option_index = int(parts[3])

            current_question = quiz_service.get_current_question(user_id)

            if current_question and current_question["id"] == question_id:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                sequence = quiz_service.active_quizzes[user_id]["answers"].get(str(question_id), [])
                sequence.append(str(option_index))
                quiz_service.active_quizzes[user_id]["answers"][str(question_id)] = sequence

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                await show_question(update, context, edit=True)

        elif query.data.startswith("quiz_reset_"):
            # –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            parts = query.data.split("_")
            question_id = int(parts[2])

            current_question = quiz_service.get_current_question(user_id)

            if current_question and current_question["id"] == question_id:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                quiz_service.active_quizzes[user_id]["answers"][str(question_id)] = []

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
                await show_question(update, context, edit=True)

        elif query.data.startswith("quiz_confirm_"):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            parts = query.data.split("_")
            question_id = int(parts[2])

            current_question = quiz_service.get_current_question(user_id)

            if current_question and current_question["id"] == question_id:
                answer = quiz_service.active_quizzes[user_id]["answers"].get(str(question_id), [])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                result = quiz_service.submit_answer(user_id, question_id, answer)

                if result["success"]:
                    if result["is_completed"]:
                        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
                        await show_test_results(update, context, result["result"])
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                        await show_question(update, context)
                else:
                    await query.edit_message_text(result["message"])

        elif query.data == "quiz_skip":
            # –ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            result = quiz_service.skip_question(user_id)

            if result["success"]:
                if result["is_completed"]:
                    # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
                    await show_test_results(update, context, result["result"])
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                    await show_question(update, context)
            else:
                await query.edit_message_text(result["message"])

    except Exception as e:
        logger.error(f"Error in handle_test_button: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def show_question(update: Update, context: ContextTypes.DEFAULT_TYPE, edit: bool = False) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question = quiz_service.get_current_question(user_id)

    if not current_question:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        result = quiz_service.complete_quiz(user_id)
        await show_test_results(update, context, result)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    question_num = quiz_service.active_quizzes[user_id]["current_question"] + 1
    total_questions = len(quiz_service.active_quizzes[user_id]["questions"])

    question_text, reply_markup, media_file = quiz_service.format_question_message(
        current_question, question_num, total_questions
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    if edit and query:
        await query.edit_message_text(
            text=question_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if media_file:
            with open(media_file, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=question_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        else:
            if query:
                await query.edit_message_text(
                    text=question_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=question_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )


async def show_test_results(update: Update, context: ContextTypes.DEFAULT_TYPE, result: dict) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    query = update.callback_query

    if not result["success"]:
        await query.edit_message_text(result["message"])
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    correct_count = result["correct_count"]
    total_questions = result["total_questions"]
    percentage = result["percentage"]

    result_text = f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞*\n\n"
    result_text += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count} –∏–∑ {total_questions}\n"
    result_text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {percentage}%\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage >= 90:
        result_text += "üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üèÜ"
    elif percentage >= 70:
        result_text += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif percentage >= 50:
        result_text += "üí™ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
    else:
        result_text += "üìö –°—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑."

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    if "new_achievements" in result and result["new_achievements"]:
        result_text += "\n\nüèÖ *–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n"
        for achievement in result["new_achievements"]:
            result_text += f"‚Ä¢ {achievement['name']} - {achievement['description']} (+{achievement['points']} –æ—á–∫–æ–≤)\n"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [
            InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="quiz_details"),
            InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data=f"quiz_repeat_{result.get('topic_id', 0)}")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="common_stats"),
            InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="common_achievements")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=result_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    period = context.args[0] if context.args else "all"
    if period not in ["week", "month", "year", "all"]:
        period = "all"

    stats = get_user_stats(user_id, period)

    if not stats["success"]:
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {stats['message']}"
        )
        return

    if not stats["has_data"]:
        periods_keyboard = [
            [
                InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="common_stats_week"),
                InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="common_stats_month"),
                InlineKeyboardButton("–ó–∞ –≥–æ–¥", callback_data="common_stats_year"),
                InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="common_stats_all")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(periods_keyboard)

        await update.message.reply_text(
            stats["message"],
            reply_markup=reply_markup
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n"
    stats_text += f"*–ü–µ—Ä–∏–æ–¥:* {get_period_name(period)}\n\n"

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_data = stats["stats"]
    stats_text += f"*–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n"
    stats_text += f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {stats_data['total_tests']}\n"
    stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats_data['average_score']}%\n"
    stats_text += f"‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats_data['best_result']['score']}% "
    stats_text += f"({stats_data['best_result']['topic']}, {stats_data['best_result']['date']})\n"
    stats_text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {format_time(stats_data['total_time_spent'])}\n"

    # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if "time_stats" in stats and stats["time_stats"]:
        time_stats = stats["time_stats"]
        stats_text += f"\n*–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:*\n"
        progress_sign = "+" if time_stats["progress"] >= 0 else ""
        stats_text += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {progress_sign}{time_stats['progress']}% "
        stats_text += f"({progress_sign}{time_stats['progress_percentage']}%)\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
    if "tests_by_topic" in stats_data and stats_data["tests_by_topic"]:
        stats_text += f"\n*–¢–µ—Å—Ç—ã –ø–æ —Ç–µ–º–∞–º:*\n"
        for topic, count in stats_data["tests_by_topic"].items():
            stats_text += f"‚Ä¢ {topic}: {count} —Ç–µ—Å—Ç–æ–≤\n"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    periods_keyboard = [
        [
            InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="common_stats_week"),
            InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="common_stats_month"),
            InlineKeyboardButton("–ó–∞ –≥–æ–¥", callback_data="common_stats_year"),
            InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="common_stats_all")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(periods_keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await update.message.reply_text(
        stats_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if "charts" in stats and stats["charts"]:
        charts = stats["charts"]

        if "progress_chart" in charts:
            await update.message.reply_photo(
                photo=charts["progress_chart"],
                caption="üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
            )

        if "topics_chart" in charts:
            await update.message.reply_photo(
                photo=charts["topics_chart"],
                caption="üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ–º–∞–º"
            )


async def show_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /achievements –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É—á–µ–Ω–∏–∫–∞"""
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
    stats = get_user_stats(user_id)

    if not stats["success"]:
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö: {stats['message']}"
        )
        return

    achievements = stats.get("achievements", [])
    total_points = stats.get("total_points", 0)

    if not achievements:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!"
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
    achievements_text = f"üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n"
    achievements_text += f"*–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:* {total_points}\n\n"

    for achievement in achievements:
        achievements_text += f"üèÖ *{achievement['name']}*\n"
        achievements_text += f"_{achievement['description']}_\n"
        achievements_text += f"–ü–æ–ª—É—á–µ–Ω–æ: {achievement['achieved_at'].strftime('%d.%m.%Y')}\n"
        achievements_text += f"–ë–∞–ª–ª—ã: +{achievement['points']}\n\n"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="common_stats"),
            InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="common_leaderboard")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        achievements_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_period_name(period: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞"""
    periods = {
        "week": "–∑–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–∑–∞ –º–µ—Å—è—Ü",
        "year": "–∑–∞ –≥–æ–¥",
        "all": "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    }
    return periods.get(period, "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")


def format_time(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –º–∏–Ω—É—Ç –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    hours = minutes // 60
    mins = minutes % 60

    if hours > 0:
        return f"{hours} —á {mins} –º–∏–Ω"
    else:
        return f"{mins} –º–∏–Ω"