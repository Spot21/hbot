import logging
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from sqlalchemy.exc import IntegrityError

from services.stats_service import generate_topic_analytics
from database.models import User, Topic, Question
from database.db_manager import get_session
from config import ADMINS

logger = logging.getLogger(__name__)


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) not in ADMINS:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º", callback_data="admin_topic_stats"),
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="admin_add_question"),
            InlineKeyboardButton("üìÅ –ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="admin_import")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã", callback_data="admin_edit_topics"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data="admin_settings")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def add_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_question –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) not in ADMINS:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞
    with get_session() as session:
        topics = session.query(Topic).all()

    if not topics:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin -> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã."
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
    keyboard = []
    for topic in topics:
        keyboard.append([
            InlineKeyboardButton(
                topic.name,
                callback_data=f"admin_select_topic_{topic.id}"
            )
        ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=reply_markup
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["admin_state"] = "adding_question"


async def import_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /import –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) not in ADMINS:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        return

    await update.message.reply_text(
        "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É:\n"
        "```\n"
        "{\n"
        '  "topic": {\n'
        '    "id": 1,\n'
        '    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",\n'
        '    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"\n'
        "  },\n"
        '  "questions": [\n'
        "    {\n"
        '      "id": 1,\n'
        '      "text": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",\n'
        '      "options": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", ...],\n'
        '      "correct_answer": [0],\n'
        '      "question_type": "single",\n'
        '      "difficulty": 1,\n'
        '      "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"\n'
        "    },\n"
        "    ...\n"
        "  ]\n"
        "}\n"
        "```\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤'.",
        parse_mode="Markdown"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["admin_state"] = "importing_questions"


async def handle_admin_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) not in ADMINS:
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if query.data == "admin_topic_stats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
            await show_topic_stats(update, context)


        elif query.data == "admin_users":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await show_users_list(update, context)

        elif query.data == "admin_add_question":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞
            with get_session() as session:
                topics = session.query(Topic).all()

                # –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
                topics_data = [{"id": topic.id, "name": topic.name} for topic in topics]

            if not topics_data:
                await query.edit_message_text(
                    "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã'."
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
            keyboard = []
            for topic in topics_data:
                keyboard.append([
                    InlineKeyboardButton(
                        topic["name"],
                        callback_data=f"admin_select_topic_{topic['id']}"
                    )
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.append([
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
                reply_markup=reply_markup
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data["admin_state"] = "adding_question"

        elif query.data == "admin_import":
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–º–ø–æ—Ä—Ç—É –≤–æ–ø—Ä–æ—Å–æ–≤
            await query.edit_message_text(
                "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n\n"
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É:\n"
                "```\n"
                "{\n"
                '  "topic": {\n'
                '    "id": 1,\n'
                '    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",\n'
                '    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"\n'
                "  },\n"
                '  "questions": [\n'
                "    {\n"
                '      "id": 1,\n'
                '      "text": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",\n'
                '      "options": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", ...],\n'
                '      "correct_answer": [0],\n'
                '      "question_type": "single",\n'
                '      "difficulty": 1,\n'
                '      "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"\n'
                "    },\n"
                "    ...\n"
                "  ]\n"
                "}\n"
                "```\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
                parse_mode="Markdown"
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data["admin_state"] = "importing_questions"

        elif query.data == "admin_edit_topics":
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º
            await show_topics_list(update, context)

        elif query.data == "admin_settings":
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            await show_bot_settings(update, context)

        elif query.data == "admin_setting_questions_count":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ
            await query.edit_message_text(
                "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ—Ç 5 –¥–æ 20):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("5", callback_data="admin_set_questions_5"),
                     InlineKeyboardButton("10", callback_data="admin_set_questions_10"),
                     InlineKeyboardButton("15", callback_data="admin_set_questions_15"),
                     InlineKeyboardButton("20", callback_data="admin_set_questions_20")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
                ])
            )

        elif query.data == "admin_setting_reports":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è–º
            from config import ENABLE_PARENT_REPORTS
            current_state = "–≤–∫–ª—é—á–µ–Ω—ã" if ENABLE_PARENT_REPORTS else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

            await query.edit_message_text(
                f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è–º —Å–µ–π—á–∞—Å {current_state}.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data="admin_reports_enable"),
                     InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="admin_reports_disable")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
                ])
            )

        elif query.data.startswith("admin_set_questions_"):
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            try:
                questions_count = int(query.data.replace("admin_set_questions_", ""))

                # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ config —Ñ–∞–π–ª–∞

                await query.edit_message_text(
                    f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {questions_count}\n\n"
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
                    ]])
                )
            except ValueError:
                await query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")
                    ]])
                )

        elif query.data.startswith("admin_reports_"):
            # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
            action = query.data.replace("admin_reports_", "")

            try:
                # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ config —Ñ–∞–π–ª–∞
                new_state = "–≤–∫–ª—é—á–µ–Ω—ã" if action == "enable" else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

                await query.edit_message_text(
                    f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è–º {new_state}.\n\n"
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
                    ]])
                )
            except Exception as e:
                await query.edit_message_text(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")
                    ]])
                )
        elif query.data == "admin_settings":
            await show_bot_settings(update, context)

        elif query.data.startswith("admin_select_topic_"):
            # –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            topic_id = int(query.data.replace("admin_select_topic_", ""))
            context.user_data["selected_topic_id"] = topic_id

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
            keyboard = [
                [
                    InlineKeyboardButton("–û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä", callback_data="admin_question_type_single"),
                    InlineKeyboardButton("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", callback_data="admin_question_type_multiple")
                ],
                [
                    InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="admin_question_type_sequence"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_topics")
                ]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:",
                reply_markup=reply_markup
            )

        elif query.data.startswith("admin_question_type_"):
            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
            question_type = query.data.replace("admin_question_type_", "")
            context.user_data["question_type"] = question_type

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            await query.edit_message_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data["admin_state"] = "entering_question_text"

        elif query.data == "admin_back_main":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await show_admin_panel(update, context)

        elif query.data == "admin_back_topics":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º
            with get_session() as session:
                topics = session.query(Topic).all()

            if not topics:
                await query.edit_message_text(
                    "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã'."
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
            keyboard = []
            for topic in topics:
                keyboard.append([
                    InlineKeyboardButton(
                        topic.name,
                        callback_data=f"admin_select_topic_{topic.id}"
                    )
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.append([
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
                reply_markup=reply_markup
            )

        elif query.data.startswith("admin_add_topic"):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã
            await query.edit_message_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã\n"
                "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data["admin_state"] = "adding_topic"

        elif query.data.startswith("admin_edit_topic_"):
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
            topic_id = int(query.data.replace("admin_edit_topic_", ""))

            with get_session() as session:
                topic = session.query(Topic).get(topic_id)

                if not topic:
                    await query.edit_message_text(
                        "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                    )
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_edit_topic_name_{topic_id}"),
                        InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_edit_topic_desc_{topic_id}")
                    ],
                    [
                        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", callback_data=f"admin_delete_topic_{topic_id}"),
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_topics_list")
                    ]
                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã:* {topic.name}\n\n"
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {topic.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )

        elif query.data == "admin_back_topics_list":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º
            await show_topics_list(update, context)

    except Exception as e:
        logger.error(f"Error in handle_admin_button: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        )


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤)"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) not in ADMINS:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    if context.user_data.get("admin_state") != "importing_questions":
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document = update.message.document
    if not document.file_name.endswith('.json'):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
        )
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        file_path = f"downloads/{document.file_name}"
        os.makedirs("downloads", exist_ok=True)
        await file.download_to_drive(file_path)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
        result = import_questions_from_json(data)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)

        if result["success"]:
            await update.message.reply_text(
                f"‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–∞: {result['topic_name']}\n"
                f"‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {result['questions_count']}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {result['message']}"
            )

    except Exception as e:
        logger.error(f"Error importing questions: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("admin_state", None)


async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    message_text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) not in ADMINS:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = context.user_data.get("admin_state", None)

    if state == "entering_question_text":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        context.user_data["question_text"] = message_text

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "–í–∞—Ä–∏–∞–Ω—Ç 1\n"
            "–í–∞—Ä–∏–∞–Ω—Ç 2\n"
            "–í–∞—Ä–∏–∞–Ω—Ç 3"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data["admin_state"] = "entering_options"

    elif state == "entering_options":
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        options = [opt.strip() for opt in message_text.split('\n') if opt.strip()]

        if len(options) < 2:
            await update.message.reply_text(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        context.user_data["options"] = options

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        question_type = context.user_data.get("question_type", "single")

        if question_type == "single":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
            options_text = "\n".join([f"{i + 1}. {opt}" for i, opt in enumerate(options)])

            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 1 –¥–æ {len(options)}):\n\n{options_text}"
            )

            context.user_data["admin_state"] = "entering_correct_answer_single"

        elif question_type == "multiple":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
            options_text = "\n".join([f"{i + 1}. {opt}" for i, opt in enumerate(options)])

            await update.message.reply_text(
                f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,3,4):\n\n{options_text}"
            )

            context.user_data["admin_state"] = "entering_correct_answer_multiple"

        elif question_type == "sequence":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
            options_text = "\n".join([f"{i + 1}. {opt}" for i, opt in enumerate(options)])

            await update.message.reply_text(
                f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3,1,4,2):\n\n{options_text}"
            )

            context.user_data["admin_state"] = "entering_correct_answer_sequence"

    elif state == "entering_correct_answer_single":
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∏–Ω–¥–µ–∫—Å (—Å —É—á–µ—Ç–æ–º, —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
            answer_index = int(message_text.strip()) - 1
            options = context.user_data.get("options", [])

            if answer_index < 0 or answer_index >= len(options):
                await update.message.reply_text(
                    f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(options)}."
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            context.user_data["correct_answer"] = [answer_index]

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞):"
            )

            context.user_data["admin_state"] = "entering_explanation"

        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    elif state == "entering_correct_answer_multiple":
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã
            answer_indices = [int(idx.strip()) - 1 for idx in message_text.split(',')]
            options = context.user_data.get("options", [])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
            for idx in answer_indices:
                if idx < 0 or idx >= len(options):
                    await update.message.reply_text(
                        f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {idx + 1}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ {len(options)}."
                    )
                    return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            context.user_data["correct_answer"] = answer_indices

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞):"
            )

            context.user_data["admin_state"] = "entering_explanation"

        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    elif state == "entering_correct_answer_sequence":
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã
            sequence = [int(idx.strip()) - 1 for idx in message_text.split(',')]
            options = context.user_data.get("options", [])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if len(sequence) != len(options) or len(set(sequence)) != len(options):
                await update.message.reply_text(
                    f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö {len(options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
                )
                return

            for idx in sequence:
                if idx < 0 or idx >= len(options):
                    await update.message.reply_text(
                        f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {idx + 1}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ {len(options)}."
                    )
                    return

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è
            sequence_str = [str(idx) for idx in sequence]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            context.user_data["correct_answer"] = sequence_str

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞):"
            )

            context.user_data["admin_state"] = "entering_explanation"

        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    elif state == "entering_explanation":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ "–ù–µ—Ç"
        explanation = None if message_text.lower() == "–Ω–µ—Ç" else message_text

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        question_data = {
            "topic_id": context.user_data.get("selected_topic_id"),
            "text": context.user_data.get("question_text"),
            "options": context.user_data.get("options"),
            "correct_answer": context.user_data.get("correct_answer"),
            "question_type": context.user_data.get("question_type"),
            "explanation": explanation
        }

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        result = add_question_to_db(question_data)

        if result["success"]:
            await update.message.reply_text(
                "‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            )

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="admin_add_question"),
                    InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="admin_back_main")
                ]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {result['message']}"
            )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop("admin_state", None)

    elif state == "adding_topic":
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = message_text.strip().split('\n')

        if not lines:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã."
            )
            return

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
        topic_name = lines[0].strip()

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) - –æ–ø–∏—Å–∞–Ω–∏–µ
        topic_description = '\n'.join(lines[1:]).strip() if len(lines) > 1 else None

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        result = add_topic_to_db(topic_name, topic_description)

        if result["success"]:
            await update.message.reply_text(
                f"‚úÖ –¢–µ–º–∞ '{topic_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º
            await show_topics_list(update, context)
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {result['message']}"
            )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop("admin_state", None)

    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )


def import_questions_from_json(data: dict) -> dict:
    """–ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if "topic" not in data or "questions" not in data:
            return {"success": False, "message": "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—è 'topic' –∏ 'questions'."}

        topic_data = data["topic"]
        questions_data = data["questions"]

        with get_session() as session:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É
            topic = session.query(Topic).filter(Topic.id == topic_data.get("id")).first()

            if not topic:
                # –ï—Å–ª–∏ —Ç–µ–º—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                topic = Topic(
                    name=topic_data["name"],
                    description=topic_data.get("description", "")
                )
                session.add(topic)
                session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
            else:
                # –ï—Å–ª–∏ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                topic.name = topic_data["name"]
                topic.description = topic_data.get("description", topic.description)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            questions_count = 0
            for q_data in questions_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –≤ —ç—Ç–æ–π —Ç–µ–º–µ
                question = session.query(Question).filter(
                    Question.topic_id == topic.id,
                    Question.id == q_data.get("id")
                ).first()

                if not question:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    question = Question(
                        topic_id=topic.id,
                        text=q_data["text"],
                        options=json.dumps(q_data["options"]),
                        correct_answer=json.dumps(q_data["correct_answer"]),
                        question_type=q_data["question_type"],
                        difficulty=q_data.get("difficulty", 1),
                        media_url=q_data.get("media_url"),
                        explanation=q_data.get("explanation", "")
                    )
                    session.add(question)
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                    question.text = q_data["text"]
                    question.options = json.dumps(q_data["options"])
                    question.correct_answer = json.dumps(q_data["correct_answer"])
                    question.question_type = q_data["question_type"]
                    question.difficulty = q_data.get("difficulty", question.difficulty)
                    question.media_url = q_data.get("media_url", question.media_url)
                    question.explanation = q_data.get("explanation", question.explanation)

                questions_count += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()

            return {
                "success": True,
                "topic_name": topic.name,
                "questions_count": questions_count
            }

    except Exception as e:
        logger.error(f"Error in import_questions_from_json: {e}")
        return {"success": False, "message": str(e)}


def add_question_to_db(data: dict) -> dict:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["topic_id", "text", "options", "correct_answer", "question_type"]
        for field in required_fields:
            if field not in data or data[field] is None:
                return {"success": False, "message": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"}

        with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            topic = session.query(Topic).get(data["topic_id"])
            if not topic:
                return {"success": False, "message": "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            question = Question(
                topic_id=data["topic_id"],
                text=data["text"],
                options=json.dumps(data["options"]),
                correct_answer=json.dumps(data["correct_answer"]),
                question_type=data["question_type"],
                difficulty=data.get("difficulty", 1),
                media_url=data.get("media_url"),
                explanation=data.get("explanation", "")
            )

            session.add(question)
            session.commit()

            return {"success": True, "question_id": question.id}

    except Exception as e:
        logger.error(f"Error in add_question_to_db: {e}")
        return {"success": False, "message": str(e)}


def add_topic_to_db(name: str, description: str = None) -> dict:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        if not name or len(name.strip()) < 3:
            return {"success": False, "message": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"}

        with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
            existing_topic = session.query(Topic).filter(Topic.name == name).first()
            if existing_topic:
                return {"success": False, "message": f"–¢–µ–º–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
            topic = Topic(
                name=name,
                description=description
            )

            session.add(topic)
            session.commit()

            return {"success": True, "topic_id": topic.id}

    except Exception as e:
        logger.error(f"Error in add_topic_to_db: {e}")
        return {"success": False, "message": str(e)}


async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º", callback_data="admin_topic_stats"),
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="admin_add_question"),
            InlineKeyboardButton("üìÅ –ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="admin_import")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã", callback_data="admin_edit_topics"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data="admin_settings")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def show_topic_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–º–∞–º"""
    query = update.callback_query

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
    stats = generate_topic_analytics()

    if not stats["success"]:
        await query.edit_message_text(
            f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['message']}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    if not stats["has_data"]:
        await query.edit_message_text(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —É—á–µ–Ω–∏–∫–∏ –ø—Ä–æ—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º*\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∏ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–º–∞—Ö
        topic_stats = stats["topic_stats"]
        stats_text += "*–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–º (–æ—Ç —Å–∞–º–æ–π —Å–ª–æ–∂–Ω–æ–π –∫ —Å–∞–º–æ–π –ø—Ä–æ—Å—Ç–æ–π):*\n"

        for i, topic in enumerate(topic_stats):
            emoji = "üî¥" if i < 2 else "üü°" if i < len(topic_stats) - 2 else "üü¢"
            stats_text += f"{emoji} {topic['topic_name']}: {topic['avg_score']}% (–ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {topic['tests_count']})\n"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        if "chart" in stats:
            await context.bot.send_photo(
                chat_id=update.effective_user.id,
                photo=stats["chart"],
                caption="üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ–º–∞–º (–æ—Ç —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∫ —Å–∞–º—ã–º –ø—Ä–æ—Å—Ç—ã–º)"
            )
    except Exception as e:
        logger.error(f"Error in show_topic_stats: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query

    try:
        with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            students_count = session.query(User).filter(User.role == "student").count()
            parents_count = session.query(User).filter(User.role == "parent").count()
            admins_count = session.query(User).filter(User.role == "admin").count()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–µ—Å—Å–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
            recent_users = []
            for user in session.query(User).order_by(User.last_active.desc()).limit(10).all():
                recent_users.append({
                    "role": user.role,
                    "full_name": user.full_name,
                    "username": user.username,
                    "telegram_id": user.telegram_id,
                    "last_active": user.last_active
                })

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        users_text = "üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        users_text += f"‚Ä¢ –í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {students_count}\n"
        users_text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {parents_count}\n"
        users_text += f"‚Ä¢ –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}\n\n"

        users_text += "*–ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        for user_data in recent_users:
            role_emoji = "üë®‚Äçüéì" if user_data["role"] == "student" else "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" if user_data["role"] == "parent" else "üë®‚Äçüíª"
            name = user_data["full_name"] or user_data["username"] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']}"
            last_active = user_data["last_active"].strftime('%d.%m.%Y %H:%M')
            users_text += f"{role_emoji} {name} - {last_active}\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton("üë®‚Äçüéì –£—á–µ–Ω–∏–∫–∏", callback_data="admin_list_students"),
                InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª–∏", callback_data="admin_list_parents")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            users_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in show_users_list: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )


async def show_topics_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query

    try:
        with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            topics_data = []
            for topic in session.query(Topic).all():
                topics_data.append({
                    "id": topic.id,
                    "name": topic.name,
                    "description": topic.description
                })

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º
        topics_text = "‚úèÔ∏è *–¢–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"

        if not topics_data:
            topics_text += "–°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç–µ–º—É."
        else:
            for topic in topics_data:
                topics_text += f"‚Ä¢ *{topic['name']}*\n"
                if topic['description']:
                    topics_text += f"  _{topic['description']}_\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="admin_add_topic")
            ]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–º
        for topic in topics_data:
            keyboard.append([
                InlineKeyboardButton(f"‚úèÔ∏è {topic['name']}", callback_data=f"admin_edit_topic_{topic['id']}")
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            topics_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in show_topics_list: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )


async def show_bot_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    query = update.callback_query

    from config import DEFAULT_QUESTIONS_COUNT, ENABLE_PARENT_REPORTS

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    settings_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
    settings_text += "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n\n"

    settings_text += "*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
    settings_text += f"‚Ä¢ –ß–∏—Å–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_QUESTIONS_COUNT}\n"
    settings_text += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è–º: {'–í–∫–ª—é—á–µ–Ω–æ' if ENABLE_PARENT_REPORTS else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}\n\n"

    settings_text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton("üî¢ –ß–∏—Å–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="admin_setting_questions_count"),
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è–º", callback_data="admin_setting_reports")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.edit_message_text(
            settings_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            settings_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )