import json
import random
import os
import logging
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
from sqlalchemy.orm import Session
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from database.models import Question, TestResult, User, Topic, Achievement
from database.db_manager import get_session
from utils.formatters import format_question_text
from services.stats_service import update_user_stats
from utils.image_utils import get_image_path

logger = logging.getLogger(__name__)

class QuizService:
    def __init__(self):
        self.active_quizzes = {}  # —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {user_id: quiz_data}

    def save_active_quizzes(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        with get_session() as session:
            for user_id, quiz_data in self.active_quizzes.items():
                # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª
                pass

    def restore_active_quizzes(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ –ë–î"""
        with get_session() as session:
            # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î –∏–ª–∏ —Ñ–∞–π–ª–∞
            pass


    def get_topics(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        with get_session() as session:
            topics = session.query(Topic).all()
            return [{"id": t.id, "name": t.name, "description": t.description} for t in topics]

    def start_quiz(self, user_id: int, topic_id: int, question_count: int = 10) -> Dict[str, Any]:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
            questions = (
                session.query(Question)
                .filter(Question.topic_id == topic_id)
                .order_by(Question.id)
                .all()
            )

            if not questions:
                return {"success": False, "message": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã"}

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            selected_questions = random.sample(questions, min(question_count, len(questions)))

            # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–∞
            quiz_data = {
                "topic_id": topic_id,
                "questions": [
                    {
                        "id": q.id,
                        "text": q.text,
                        "options": json.loads(q.options),
                        "correct_answer": json.loads(q.correct_answer),
                        "question_type": q.question_type,
                        "explanation": q.explanation,
                        "media_url": q.media_url
                    }
                    for q in selected_questions
                ],
                "current_question": 0,
                "answers": {},
                "start_time": datetime.now(),
                "is_completed": False
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            self.active_quizzes[user_id] = quiz_data

            return {"success": True, "quiz_data": quiz_data}

    def get_current_question(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–µ—Å—Ç–µ"""
        if user_id not in self.active_quizzes:
            return None

        quiz_data = self.active_quizzes[user_id]
        if quiz_data["current_question"] >= len(quiz_data["questions"]):
            return None

        question = quiz_data["questions"][quiz_data["current_question"]]
        return question

    def format_question_message(self, question: Dict[str, Any], question_num: int, total_questions: int,
                                user_id: int = None) -> Tuple[str, InlineKeyboardMarkup, Optional[str]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = f"*–í–æ–ø—Ä–æ—Å {question_num}/{total_questions}*\n\n{question['text']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –≤–æ–ø—Ä–æ—Å–∞
        if question["question_type"] == "multiple":
            question_text += "\n\n_–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤_"
        elif question["question_type"] == "sequence":
            question_text += "\n\n_–†–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ_"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        if question["question_type"] == "single" or question["question_type"] == "multiple":
            # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            for i, option in enumerate(question["options"]):
                button_text = option
                if question["question_type"] == "multiple" and user_id is not None:
                    # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã
                    selected = self.is_option_selected(user_id, question["id"], i)
                    button_text = f"{'‚òë' if selected else '‚òê'} {option}"
                callback_data = f"quiz_answer_{question['id']}_{i}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            if question["question_type"] == "multiple":
                keyboard.append(
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f"quiz_confirm_{question['id']}")])

        elif question["question_type"] == "sequence" and user_id is not None:
            # –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            current_sequence = self.get_current_sequence(user_id, question["id"])
            if not current_sequence:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
                for i, option in enumerate(question["options"]):
                    keyboard.append(
                        [InlineKeyboardButton(f"{i + 1}. {option}", callback_data=f"quiz_seq_{question['id']}_{i}")])
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã
                sequence_text = "\n".join(
                    [f"{i + 1}. {question['options'][int(opt)]}" for i, opt in enumerate(current_sequence)])
                question_text += f"\n\n–¢–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n{sequence_text}"

                remaining_options = [i for i in range(len(question["options"])) if str(i) not in current_sequence]
                for i in remaining_options:
                    keyboard.append(
                        [InlineKeyboardButton(question["options"][i], callback_data=f"quiz_seq_{question['id']}_{i}")])

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard.append([
                    InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"quiz_reset_{question['id']}"),
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"quiz_confirm_{question['id']}")
                ])
        elif question["question_type"] == "sequence" and user_id is None:
            # –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –µ—Å–ª–∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω
            for i, option in enumerate(question["options"]):
                keyboard.append(
                    [InlineKeyboardButton(f"{i + 1}. {option}", callback_data=f"quiz_seq_{question['id']}_{i}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å–∫–∞
        keyboard.append([InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="quiz_skip")])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        media_file = None
        if question.get("media_url"):
            try:
                media_file = get_image_path(question["media_url"])
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                if not os.path.exists(media_file):
                    logger.warning(f"Media file not found: {media_file}")
                    media_file = None
            except Exception as e:
                logger.error(f"Error getting media file: {e}")
                media_file = None

        return question_text, InlineKeyboardMarkup(keyboard), media_file

    def is_option_selected(self, user_id: int, question_id: int, option_index: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–±—Ä–∞–Ω –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
        quiz_data = self.active_quizzes.get(user_id, {})
        answers = quiz_data.get("answers", {})
        question_answers = answers.get(str(question_id), [])
        return option_index in question_answers

    def get_current_sequence(self, user_id: int, question_id: int) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
        quiz_data = self.active_quizzes.get(user_id, {})
        answers = quiz_data.get("answers", {})
        return answers.get(str(question_id), [])

    def submit_answer(self, user_id: int, question_id: int, answer) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.active_quizzes:
            return {"success": False, "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"}

        quiz_data = self.active_quizzes[user_id]
        question_index = quiz_data["current_question"]

        if question_index >= len(quiz_data["questions"]):
            return {"success": False, "message": "–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"}

        current_question = quiz_data["questions"][question_index]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        quiz_data["answers"][str(current_question["id"])] = answer

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        quiz_data["current_question"] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ç–µ—Å—Ç
        if quiz_data["current_question"] >= len(quiz_data["questions"]):
            quiz_data["is_completed"] = True
            result = self.complete_quiz(user_id)
            return {"success": True, "is_completed": True, "result": result}

        return {"success": True, "is_completed": False}

    def skip_question(self, user_id: int) -> Dict[str, Any]:
        """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        if user_id not in self.active_quizzes:
            return {"success": False, "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"}

        quiz_data = self.active_quizzes[user_id]
        question_index = quiz_data["current_question"]

        if question_index >= len(quiz_data["questions"]):
            return {"success": False, "message": "–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"}

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        quiz_data["current_question"] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ç–µ—Å—Ç
        if quiz_data["current_question"] >= len(quiz_data["questions"]):
            quiz_data["is_completed"] = True
            result = self.complete_quiz(user_id)
            return {"success": True, "is_completed": True, "result": result}

        return {"success": True, "is_completed": False}

    def complete_quiz(self, user_id: int) -> Dict[str, Any]:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if user_id not in self.active_quizzes:
            return {"success": False, "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"}

        quiz_data = self.active_quizzes[user_id]
        answers = quiz_data["answers"]
        questions = quiz_data["questions"]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        correct_count = 0
        total_questions = len(questions)
        question_results = []

        for question in questions:
            question_id = str(question["id"])
            user_answer = answers.get(question_id, None)
            is_correct = False

            if user_answer is not None:
                if question["question_type"] == "single":
                    is_correct = user_answer == question["correct_answer"][0]
                elif question["question_type"] == "multiple":
                    is_correct = set(user_answer) == set(question["correct_answer"])
                elif question["question_type"] == "sequence":
                    is_correct = user_answer == question["correct_answer"]

            question_results.append({
                "question": question["text"],
                "user_answer": user_answer,
                "correct_answer": question["correct_answer"],
                "is_correct": is_correct,
                "explanation": question.get("explanation", "")
            })

            if is_correct:
                correct_count += 1

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        percentage = round((correct_count / total_questions) * 100, 1) if total_questions > 0 else 0

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É
        with get_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∞
            test_result = TestResult(
                user_id=user.id,
                topic_id=quiz_data["topic_id"],
                score=correct_count,
                max_score=total_questions,
                percentage=percentage,
                time_spent=(datetime.now() - quiz_data["start_time"]).seconds
            )
            session.add(test_result)
            session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_stats(user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            self.check_achievements(user_id, correct_count, total_questions, percentage)

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del self.active_quizzes[user_id]

        return {
            "success": True,
            "correct_count": correct_count,
            "total_questions": total_questions,
            "percentage": percentage,
            "question_results": question_results
        }

    def check_achievements(self, user_id: int, correct_count: int, total_questions: int, percentage: float) -> List[
        Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        new_achievements = []

        with get_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return []

            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∏–º–µ—é—â–∏–µ—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_achievements = {a.name for a in user.achievements}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            achievements_to_check = [
                # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
                {"name": "–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç", "description": "–ü—Ä–æ–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç!", "points": 10,
                 "condition": True, "badge_url": "badges/first_test.png"},
                {"name": "–û—Ç–ª–∏—á–Ω–∏–∫", "description": "–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ —Ç–µ—Å—Ç–µ", "points": 50,
                 "condition": percentage == 100, "badge_url": "badges/perfect_score.png"},
                {"name": "–ó–Ω–∞—Ç–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏", "description": "–ü—Ä–æ–π–¥–∏—Ç–µ 10 —Ç–µ—Å—Ç–æ–≤", "points": 100,
                 "condition": len(user.results) >= 10, "badge_url": "badges/history_expert.png"},
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            for achievement_data in achievements_to_check:
                if (achievement_data["name"] not in existing_achievements and
                        achievement_data["condition"]):
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                    achievement = Achievement(
                        user_id=user.id,
                        name=achievement_data["name"],
                        description=achievement_data["description"],
                        badge_url=achievement_data.get("badge_url"),
                        points=achievement_data.get("points", 0)
                    )
                    session.add(achievement)
                    new_achievements.append(achievement_data)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if new_achievements:
                session.commit()

        return new_achievements