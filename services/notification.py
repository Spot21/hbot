import logging
import asyncio
import json
import traceback
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram.ext import Application

from database.models import User, Notification
from database.db_manager import get_session
from services.parent_service import ParentService

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""

    def __init__(self, application: Application):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.application = application
        self.scheduler = None
        self._running = False
        self.parent_service = ParentService()

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if self._running:
                logger.warning("Notification service is already running")
                return

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler = AsyncIOScheduler()

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            self.scheduler.add_job(
                self.process_notifications,
                'interval',
                minutes=5,
                id='process_notifications'
            )
            self.scheduler.add_job(
                self.send_weekly_reports,
                'cron',
                day_of_week='sun',
                hour=10,
                id='send_weekly_reports'
            )
            self.scheduler.add_job(
                self.send_reminders,
                'cron',
                hour=18,
                id='send_reminders'
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.start()
            self._running = True
            logger.info("Notification scheduler started")
        except Exception as e:
            logger.error(f"Error starting notification scheduler: {e}")
            logger.error(traceback.format_exc())
            self._running = False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if self.scheduler and self._running:
                self.scheduler.shutdown(wait=True)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ wait=True –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                self._running = False
                logger.info("Notification scheduler stopped")
        except Exception as e:
            logger.error(f"Error stopping notification scheduler: {e}")
            logger.error(traceback.format_exc())

    async def process_notifications(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self._running:
            return

        try:
            with get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notifications = session.query(Notification).filter(
                    Notification.is_read == False,
                    Notification.scheduled_at <= datetime.utcnow()
                ).all()

                for notification in notifications:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = session.query(User).get(notification.user_id)
                    if not user:
                        logger.warning(f"User not found for notification {notification.id}")
                        notification.is_read = True
                        continue

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    try:
                        await self.application.bot.send_message(
                            chat_id=user.telegram_id,
                            text=f"*{notification.title}*\n\n{notification.message}",
                            parse_mode="Markdown"
                        )

                        # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                        notification.is_read = True
                        logger.info(f"Notification {notification.id} sent to user {user.telegram_id}")

                    except Exception as e:
                        logger.error(f"Error sending notification {notification.id} to user {user.telegram_id}: {e}")
                        logger.error(traceback.format_exc())

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                session.commit()

        except Exception as e:
            logger.error(f"Error processing notifications: {e}")
            logger.error(traceback.format_exc())

    async def send_weekly_reports(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è–º"""
        if not self._running:
            return

        try:
            logger.info("Starting weekly reports generation in NotificationService")
            await self.parent_service.send_weekly_reports()
            logger.info("Weekly reports generation completed in NotificationService")
        except Exception as e:
            logger.error(f"Error sending weekly reports: {e}")
            logger.error(traceback.format_exc())

    async def send_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"""
        if not self._running:
            return

        try:
            with get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç –±–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏
                week_ago = datetime.utcnow() - timedelta(days=7)
                inactive_students = session.query(User).filter(
                    User.role == "student",
                    User.last_active < week_ago
                ).all()

                for student in inactive_students:
                    try:
                        await self.application.bot.send_message(
                            chat_id=student.telegram_id,
                            text="üëã –ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—ã–≤–∞–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏.\n"
                                 "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /test, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
                        )
                        logger.info(f"Reminder sent to student {student.telegram_id}")
                    except Exception as e:
                        logger.error(f"Error sending reminder to student {student.telegram_id}: {e}")
                        logger.error(traceback.format_exc())

        except Exception as e:
            logger.error(f"Error sending reminders: {e}")
            logger.error(traceback.format_exc())

    async def create_notification(self, user_id: int, title: str, message: str,
                                  notification_type: str, scheduled_at: datetime = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            with get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(User).get(user_id)
                if not user:
                    return False

                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                notification = Notification(
                    user_id=user_id,
                    title=title,
                    message=message,
                    notification_type=notification_type,
                    scheduled_at=scheduled_at
                )
                session.add(notification)
                session.commit()

                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                if scheduled_at is None or scheduled_at <= datetime.utcnow():
                    await self.process_notifications()

                return True

        except Exception as e:
            logger.error(f"Error creating notification: {e}")
            return False

    async def notify_test_completion(self, student_id: int, test_result: dict) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —É—á–µ–Ω–∏–∫–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞
            with get_session() as session:
                student = session.query(User).get(student_id)
                if not student or student.role != "student":
                    return

                # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
                parents_query = (
                    session.query(User)
                    .filter(User.role == "parent")
                    .filter(User.children.any(id=student_id))
                )
                parents = parents_query.all()

                if not parents:
                    return

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                percentage = test_result.get("percentage", 0)
                correct_count = test_result.get("correct_count", 0)
                total_questions = test_result.get("total_questions", 0)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if percentage >= 90:
                    result_description = "–æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                elif percentage >= 70:
                    result_description = "—Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                elif percentage >= 50:
                    result_description = "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                else:
                    result_description = "—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º"

                message = (
                    f"–£—á–µ–Ω–∏–∫ {student.full_name or student.username} –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {correct_count} –∏–∑ {total_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ({percentage}%).\n"
                    f"–û—Ü–µ–Ω–∫–∞: {result_description}.\n\n"
                    f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report."
                )

                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                for parent in parents:
                    if not parent.settings:
                        continue

                    settings = json.loads(parent.settings)

                    if "student_notifications" not in settings:
                        continue

                    student_settings = settings["student_notifications"].get(str(student_id), {})

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
                    if not student_settings.get("test_completion", False):
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    low_threshold = student_settings.get("low_score_threshold", 60)
                    high_threshold = student_settings.get("high_score_threshold", 90)

                    send_notification = False

                    if percentage < low_threshold:
                        send_notification = True
                        title = "–ù–∏–∑–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"
                    elif percentage >= high_threshold:
                        send_notification = True
                        title = "–í—ã—Å–æ–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"

                    if send_notification:
                        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
                        notification = Notification(
                            user_id=parent.id,
                            title=title,
                            message=message,
                            notification_type="test_result"
                        )
                        session.add(notification)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                session.commit()

        except Exception as e:
            logger.error(f"Error notifying about test completion: {e}")
